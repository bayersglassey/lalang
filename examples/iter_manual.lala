#
# Defining iterators manually, as if the language didn't have them built-in
#


"iter" @class =iter
[
    =self =data
    data self =.data
    0 self =.i
    data @typeof =T
    null self =.len
    T int == {
        data self =.len
        { .i } self =.get
    } @if
    T list == T str == | {
        data .len self =.len
        [ =self self .i self .data .get ] self =.get
    } @if
    T dict == {
        data .len self =.len
        [ =self self .i self .data .get_key ] self =.get
    } @if
    self .len null == { data .__iter__ } { self } @ifelse
] $__init__ iter .set_getter
[
    =self
    self .i self .len >=
    { false }
    {
        self self .get @
        self .i 1 + self =.i
        true
    }
    @ifelse
] $__next__ iter .set_getter


[
    @iter =it
    =body
    { it .__next__ }
    body @while
] =@for


"Iterating over an int:\n" .write
print 3 @for

"Iterating over a list:\n" .write
print ( "a" "b" "c" 3 list .build ) @for

"Iterating over a string:\n" .write
print "abc" @for

"Iterating over a dict:\n" .write
print ( "x" 10 "y" 20 2 dict .build ) @for

"Iterating over a custom iterable:\n" .write
"CustomIterable" @class =CustomIterable
[ =self 0 self =.i self ] $__init__ CustomIterable .set_getter
{ } $__iter__ CustomIterable .set_getter
[
    =self
    self .i 0 == { "hello" true } @if
    self .i 1 == { "world" true } @if
    self .i 2 == { false } @if
    self .i 1 + self =.i
] $__next__ CustomIterable .set_getter
print @CustomIterable @for
