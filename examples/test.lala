
"List test:\n" .write
( "a" "b" "c" 3 list .build ) =l
1 l .get @print # "b"

"List copy test:\n" .write
l .copy =l2
"d" l2 .push
l @print
l2 @print

"Dict test:\n" .write
( "x" 10 "y" 20 2 dict .build ) =d
"x" d .get @print # 10

"Dict copy test:\n" .write
d .copy =d2
30 "z" d2 .set
d @print
d2 @print

"While test:\n" .write
0 =i { i 5 < } { i @print i 1 + =i } @while # 0 1 2 3 4

"Func args test:\n" .write
{ + } =add10
( 10 1 list .build ) add10 =.args
5 @add10 @print # 15

"Recursion test:\n" .write
{
    @dup 1 <=
    { @drop 1 }
    { @dup 1 - @factorial * }
    @ifelse
} =factorial
1 @factorial @print # 1
2 @factorial @print # 2
3 @factorial @print # 6
4 @factorial @print # 24

"Recursion test, with locals:\n" .write
[
    =n
    n 1 <=
    { 1 }
    { n 1 - @factorial n * }
    @ifelse
] =factorial2
1 @factorial2 @print # 1
2 @factorial2 @print # 2
3 @factorial2 @print # 6
4 @factorial2 @print # 24

"Iteration test:\n" .write
"abc" @iter =it
it @print
it @next @print @print # "a" true
it @next @print @print # "b" true
it @next @print @print # "c" true
it @next @print # false
print "abc" @for # "a" "b" "c"
print ( 1 3 @range ) @for # 1 2
print ( "a" "b" 2 list .build ) @for # "a" "b"
print 3 .times @for # 0 1 2
1 3 @range @list @print # [1, 2]
"x" 1 @pair "y" 2 @pair 2 list .build @dict @print # {x: 1, y: 2}
